from abc import ABC, abstractmethod
import subprocess
from time import sleep
from typing import List
from util.flag.flag_finder import FlagFinder


class Exploit(ABC):

    def __init__(self, max_tries):
        self._flag_finder = FlagFinder()
        self._found_vulnerable_functions = []
        self.max_tries = max_tries

    @property
    def flag_finder(self):
        return self._flag_finder

    @property
    def found_vulnerable_functions(self):
        return self._found_vulnerable_functions

    @property
    @abstractmethod
    def name(self) -> str:
        pass

    @property
    @abstractmethod
    def vulnerable_functions(self) -> List[str]:
        pass

    @abstractmethod
    def exploit(self, process: subprocess, iteration, max_tries) -> bool:
        pass

    def attempt_exploit(self, path):
        print(f'Attempting {self.name}:\n')
        iteration = 0
        failed = False

        while iteration <= self.max_tries:
            iteration += 1

            process = subprocess.Popen(
                f'"{path}"',
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                shell=True,
                text=True,
            )

            while True:

                failed = self.exploit(process, iteration)

                if failed:
                    break

                sleep(0.001)
                if process.poll() is not None:
                    process.terminate()
                    break

        print(f'Could not locate flag using {self.name}.\n')
