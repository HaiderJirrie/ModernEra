import random
import string
import subprocess
import sys
from typing import List
from exploits.exploit import Exploit
from util.flag.flag_finder import FlagFinder


class BufferOverflowAttack(Exploit):
    def __init__(self, max_tries):
        super().__init__(max_tries)

        self._name = "buffer overflow"
        self._vulnerable_functions = [
            "gets",
            "fgets",
            "strcopy",
            "strcat",
            "sprintf",
            "gets_s",
            "read",
            "strncpy",
            "strncat",
            "memcpy",
        ]

    @property
    def name(self) -> str:
        return self._name

    @property
    def vulnerable_functions(self) -> List[str]:
        return self._vulnerable_functions

    @staticmethod
    def random_lowercase_string(length):
        return "".join(random.choice(string.ascii_lowercase) for _ in range(length))

    def exploit(self, process, iteration):
        length = random.randint(0, 128)
        input_str = self.random_lowercase_string(length) + "\n"

        try:
            process.stdin.write(input_str)
            process.stdin.flush()

            output = process.stdout.read(1024)
            
            flag = FlagFinder().search_for_flag_in_text(output)

            if flag:
                print(
                    f"Flag has been found using this input:\n{input_str}\noutput:\n{output}\n{flag}"
                )
                sys.exit()

        except subprocess.TimeoutExpired:
            print("Subprocess timed out")
            return True
        except Exception as e:
            print(f"Error during fuzzing: {e}")
            return True

        return False
